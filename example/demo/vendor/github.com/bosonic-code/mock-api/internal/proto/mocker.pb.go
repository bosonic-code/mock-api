// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mocker.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	mocker.proto

It has these top-level messages:
	AddHandlerRequest
	AddHandlerResponse
	RequestMatcher
	HeaderValue
	MatcherResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type AddHandlerRequest struct {
	RequestMatcher *RequestMatcher  `protobuf:"bytes,1,opt,name=requestMatcher" json:"requestMatcher,omitempty"`
	Response       *MatcherResponse `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *AddHandlerRequest) Reset()                    { *m = AddHandlerRequest{} }
func (m *AddHandlerRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddHandlerRequest) ProtoMessage()               {}
func (*AddHandlerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddHandlerRequest) GetRequestMatcher() *RequestMatcher {
	if m != nil {
		return m.RequestMatcher
	}
	return nil
}

func (m *AddHandlerRequest) GetResponse() *MatcherResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type AddHandlerResponse struct {
}

func (m *AddHandlerResponse) Reset()                    { *m = AddHandlerResponse{} }
func (m *AddHandlerResponse) String() string            { return proto1.CompactTextString(m) }
func (*AddHandlerResponse) ProtoMessage()               {}
func (*AddHandlerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RequestMatcher struct {
	Method  string                  `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	Path    string                  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Body    string                  `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Query   map[string]string       `protobuf:"bytes,4,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Headers map[string]*HeaderValue `protobuf:"bytes,5,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RequestMatcher) Reset()                    { *m = RequestMatcher{} }
func (m *RequestMatcher) String() string            { return proto1.CompactTextString(m) }
func (*RequestMatcher) ProtoMessage()               {}
func (*RequestMatcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestMatcher) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RequestMatcher) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RequestMatcher) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *RequestMatcher) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestMatcher) GetHeaders() map[string]*HeaderValue {
	if m != nil {
		return m.Headers
	}
	return nil
}

type HeaderValue struct {
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *HeaderValue) Reset()                    { *m = HeaderValue{} }
func (m *HeaderValue) String() string            { return proto1.CompactTextString(m) }
func (*HeaderValue) ProtoMessage()               {}
func (*HeaderValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HeaderValue) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type MatcherResponse struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Body   string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *MatcherResponse) Reset()                    { *m = MatcherResponse{} }
func (m *MatcherResponse) String() string            { return proto1.CompactTextString(m) }
func (*MatcherResponse) ProtoMessage()               {}
func (*MatcherResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MatcherResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MatcherResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto1.RegisterType((*AddHandlerRequest)(nil), "proto.AddHandlerRequest")
	proto1.RegisterType((*AddHandlerResponse)(nil), "proto.AddHandlerResponse")
	proto1.RegisterType((*RequestMatcher)(nil), "proto.RequestMatcher")
	proto1.RegisterType((*HeaderValue)(nil), "proto.HeaderValue")
	proto1.RegisterType((*MatcherResponse)(nil), "proto.MatcherResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mocker service

type MockerClient interface {
	AddHandler(ctx context.Context, in *AddHandlerRequest, opts ...grpc.CallOption) (*AddHandlerResponse, error)
}

type mockerClient struct {
	cc *grpc.ClientConn
}

func NewMockerClient(cc *grpc.ClientConn) MockerClient {
	return &mockerClient{cc}
}

func (c *mockerClient) AddHandler(ctx context.Context, in *AddHandlerRequest, opts ...grpc.CallOption) (*AddHandlerResponse, error) {
	out := new(AddHandlerResponse)
	err := grpc.Invoke(ctx, "/proto.Mocker/AddHandler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mocker service

type MockerServer interface {
	AddHandler(context.Context, *AddHandlerRequest) (*AddHandlerResponse, error)
}

func RegisterMockerServer(s *grpc.Server, srv MockerServer) {
	s.RegisterService(&_Mocker_serviceDesc, srv)
}

func _Mocker_AddHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockerServer).AddHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mocker/AddHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockerServer).AddHandler(ctx, req.(*AddHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mocker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mocker",
	HandlerType: (*MockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHandler",
			Handler:    _Mocker_AddHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mocker.proto",
}

func init() { proto1.RegisterFile("mocker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xc7, 0x6d, 0x4b, 0x51, 0xa6, 0x04, 0x75, 0x82, 0xa4, 0x72, 0x6a, 0xea, 0x85, 0x13, 0x87,
	0x9a, 0x18, 0x62, 0xe4, 0x60, 0x8c, 0x09, 0x17, 0x4c, 0xdc, 0x83, 0xf7, 0x42, 0x27, 0x69, 0xc2,
	0x47, 0x61, 0xbb, 0x35, 0xe9, 0x0b, 0xf8, 0x7c, 0x3e, 0x92, 0xd9, 0x0f, 0x68, 0xc1, 0x9e, 0x3a,
	0x33, 0xff, 0xf9, 0xcd, 0x4c, 0x67, 0x07, 0xba, 0x9b, 0x6c, 0xb9, 0x22, 0x3e, 0xde, 0xf1, 0x4c,
	0x64, 0xe8, 0xaa, 0x4f, 0xf8, 0x63, 0xc1, 0xed, 0x6b, 0x92, 0xcc, 0xe2, 0x6d, 0xb2, 0x26, 0xce,
	0x68, 0x5f, 0x50, 0x2e, 0x70, 0x0a, 0x3d, 0xae, 0xcd, 0x79, 0x2c, 0x96, 0x29, 0x71, 0xdf, 0x0a,
	0xac, 0x91, 0x17, 0xdd, 0x69, 0x78, 0xcc, 0x4e, 0x44, 0x76, 0x96, 0x8c, 0x11, 0x5c, 0x71, 0xca,
	0x77, 0xd9, 0x36, 0x27, 0xdf, 0x56, 0xe0, 0xc0, 0x80, 0x07, 0xc2, 0xa8, 0xec, 0x98, 0x17, 0xf6,
	0x01, 0xeb, 0x73, 0x98, 0xe8, 0xaf, 0x0d, 0xbd, 0xd3, 0x66, 0x38, 0x80, 0xf6, 0x86, 0x44, 0x9a,
	0x25, 0x6a, 0xa6, 0x0e, 0x33, 0x1e, 0x22, 0xb4, 0x76, 0xb1, 0x48, 0x55, 0xc3, 0x0e, 0x53, 0xb6,
	0x8c, 0x2d, 0xb2, 0xa4, 0xf4, 0x1d, 0x1d, 0x93, 0x36, 0x3e, 0x81, 0xbb, 0x2f, 0x88, 0x97, 0x7e,
	0x2b, 0x70, 0x46, 0x5e, 0x14, 0x34, 0xfe, 0xd2, 0xf8, 0x53, 0xa6, 0xbc, 0x6f, 0x05, 0x2f, 0x99,
	0x4e, 0xc7, 0x17, 0xb8, 0x4c, 0x29, 0x4e, 0x88, 0xe7, 0xbe, 0xab, 0xc8, 0xb0, 0x99, 0x9c, 0xe9,
	0x24, 0xcd, 0x1e, 0x90, 0xe1, 0x04, 0xa0, 0x2a, 0x89, 0x37, 0xe0, 0xac, 0xa8, 0x34, 0x3f, 0x20,
	0x4d, 0xec, 0x83, 0xfb, 0x1d, 0xaf, 0x0b, 0x32, 0xe3, 0x6b, 0xe7, 0xd9, 0x9e, 0x58, 0xc3, 0x0f,
	0xe8, 0xd6, 0x4b, 0x36, 0xb0, 0xa3, 0x3a, 0xeb, 0x45, 0x68, 0xe6, 0xd2, 0xd4, 0x97, 0x54, 0x6a,
	0xf5, 0xc2, 0x07, 0xf0, 0x6a, 0x4a, 0xd5, 0xd8, 0x0a, 0x9c, 0x63, 0xe3, 0x70, 0x0a, 0xd7, 0x67,
	0x4f, 0x25, 0xf7, 0x9e, 0x8b, 0x58, 0x14, 0xb9, 0x6a, 0xed, 0x32, 0xe3, 0x1d, 0x77, 0x6c, 0x57,
	0x3b, 0x8e, 0xe6, 0xd0, 0x9e, 0xab, 0x63, 0xc3, 0x37, 0x80, 0xea, 0x59, 0xd1, 0x37, 0xa3, 0xfd,
	0xbb, 0xb8, 0xe1, 0x7d, 0x83, 0x62, 0x6e, 0xe0, 0x62, 0xd1, 0x56, 0xda, 0xe3, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x75, 0x29, 0x39, 0x55, 0xc2, 0x02, 0x00, 0x00,
}
